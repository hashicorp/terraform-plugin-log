package tfsdklog

import (
	"context"

	"github.com/hashicorp/go-hclog"
)

const newSubsystemLoggerWarning = "This log was generated by an SDK subsystem logger that wasn't created before being used. Use tflog.NewSubsystem to create this logger before it is used."

func NewSubsystem(ctx context.Context, subsystem string, options ...Option) context.Context {
	logger := getRootLogger(ctx)
	if logger == nil {
		// this essentially should never happen in production
		// the root logger for provider code should be injected
		// by whatever  the provider developer is using, so
		// really this is only likely in unit tests, at most
		// so just making this a no-op is fine
		return ctx
	}
	subLogger := logger.Named(subsystem)
	opts := applyLoggerOpts(options...)
	if opts.level != hclog.NoLevel {
		subLogger.SetLevel(opts.level)
	}
	return setSubsystemLogger(ctx, subsystem, logger.Named(subsystem))
}

func SubsystemWith(ctx context.Context, subsystem, key string, value interface{}) context.Context {
	logger := getSubsystemLogger(ctx, subsystem)
	if logger == nil {
		// create a new logger if one doesn't exist
		logger = getSubsystemLogger(NewSubsystem(ctx, subsystem), subsystem).With("new_logger_warning", newSubsystemLoggerWarning)
	}
	return setSubsystemLogger(ctx, subsystem, logger.With(key, value))
}

func SubsystemTrace(ctx context.Context, subsystem, msg string, args ...interface{}) {
	logger := getSubsystemLogger(ctx, subsystem)
	if logger == nil {
		// create a new logger if one doesn't exist
		logger = getSubsystemLogger(NewSubsystem(ctx, subsystem), subsystem).With("new_logger_warning", newSubsystemLoggerWarning)
	}
	logger.Trace(msg, args...)
}

func SubsystemDebug(ctx context.Context, subsystem, msg string, args ...interface{}) {
	logger := getSubsystemLogger(ctx, subsystem)
	if logger == nil {
		// create a new logger if one doesn't exist
		logger = getSubsystemLogger(NewSubsystem(ctx, subsystem), subsystem).With("new_logger_warning", newSubsystemLoggerWarning)
	}
	logger.Debug(msg, args...)
}

func SubsystemInfo(ctx context.Context, subsystem, msg string, args ...interface{}) {
	logger := getSubsystemLogger(ctx, subsystem)
	if logger == nil {
		// create a new logger if one doesn't exist
		logger = getSubsystemLogger(NewSubsystem(ctx, subsystem), subsystem).With("new_logger_warning", newSubsystemLoggerWarning)
	}
	logger.Info(msg, args...)
}

func SubsystemWarn(ctx context.Context, subsystem, msg string, args ...interface{}) {
	logger := getSubsystemLogger(ctx, subsystem)
	if logger == nil {
		// create a new logger if one doesn't exist
		logger = getSubsystemLogger(NewSubsystem(ctx, subsystem), subsystem).With("new_logger_warning", newSubsystemLoggerWarning)
	}
	logger.Warn(msg, args...)
}

func SubsystemError(ctx context.Context, subsystem, msg string, args ...interface{}) {
	logger := getSubsystemLogger(ctx, subsystem)
	if logger == nil {
		// create a new logger if one doesn't exist
		logger = getSubsystemLogger(NewSubsystem(ctx, subsystem), subsystem).With("new_logger_warning", newSubsystemLoggerWarning)
	}
	logger.Error(msg, args...)
}
